/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.cathoappfoodtruckback.service.api.controller;

import com.example.cathoappfoodtruckback.service.api.model.Error;
import com.example.cathoappfoodtruckback.service.api.model.UserDTO;
import com.example.cathoappfoodtruckback.service.exception.FunctionalException;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Validated
@Api(value = "Users", description = "the Users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/user : List  user
     * Get a list of user
     *
     * @param pseudo identifiant (required)
     * @param mdt mot de passe (required)
     * @return Successful response - returns an array of &#x60;UserDTO&#x60; entities. (status code 200)
     *         or No Content (status code 204)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "List  user", nickname = "getUser", notes = "Get a list of user", response = UserDTO.class, tags={ "Users", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns an array of `UserDTO` entities.", response = UserDTO.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/user",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<UserDTO> getUser(@ApiParam(value = "identifiant" ,required=true) @RequestHeader(value="pseudo", required=true) String pseudo,@ApiParam(value = "mot de passe" ,required=true) @RequestHeader(value="mdt", required=true) String mdt) throws FunctionalException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tocken\" : \"tocken\", \"solde\" : 6.027456183070403, \"id_user\" : 0, \"formation\" : \"formation\", \"nom\" : \"nom\", \"prenom\" : \"prenom\", \"pseudo\" : \"pseudo\", \"url_image\" : \"url_image\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
